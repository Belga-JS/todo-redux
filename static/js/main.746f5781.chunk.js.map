{"version":3,"sources":["App.js","serviceWorker.js","Reducers/listTodoReducers.js","Reducers/changeTxtReducers.js","store.js","index.js"],"names":["App","add","text","props","changeText","ADD_TODO","id","className","type","placeholder","onChange","e","CHANGE_TXT","onClick","this","listTodoReducers","map","el","i","key","delete","Component","connect","changetext","ChangeTextReducers","dispatch","undo","value","target","Boolean","window","location","hostname","match","initState","state","action","random","ChangeTxtReducers","store","createStore","combineReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAMMA,G,iNACJC,IAAM,WACJ,IAAIC,EAAO,EAAKC,MAAMC,WAEtB,EAAKD,MAAME,SAASH,EADX,gB,wEAID,IAAD,OACP,OACE,6BAEE,yBAAKI,GAAG,QAAQC,UAAU,UACxB,yBAAKA,UAAU,QACb,0CAAmB,6BACnB,6CAEF,6BACE,2BAAOC,KAAK,OAAOC,YAAY,iBAAiBC,SAAU,SAACC,GAAD,OAAO,EAAKR,MAAMS,WAAWD,MAAM,6BAAM,6BAAM,6BACzG,0BAAMJ,UAAU,SAASM,QAASC,KAAKb,KAAvC,UAGJ,yBAAKM,UAAU,YACb,0DACCO,KAAKX,MAAMY,iBAAiBC,KAAI,SAACC,EAAIC,GACpC,OACE,uBAAGC,IAAKD,GAAG,8BAAOD,EAAGf,MAAY,4BAAQK,UAAU,OAAOM,QAAS,kBAAM,EAAKO,OAAOH,EAAGX,MAAvD,UAAjC,c,GAzBIe,cAqEHC,eAPS,SAAC,GACvB,MAAO,CACLP,iBAFkE,EAA3CA,iBAGvBQ,WAHkE,EAAzBC,uBAdlB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,MAAO,CACLpB,SAAU,SAACH,EAAMwB,GACfD,EAAS,CAAEjB,KAAM,WAAYN,KAAMA,EAAMwB,KAAMA,KAGjDd,WAAY,SAACD,GACXc,EAAS,CAAEjB,KAAM,aAAcmB,MAAOhB,EAAEiB,OAAOD,YActCL,CAA6CtB,GC/DxC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBAC,EAAY,CACd,CAAE,GAAM,EAAG,KAAQ,QAAS,KAAQ,aACpC,CAAE,GAAM,EAAG,KAAQ,QAAS,KAAQ,gBAazBnB,EARU,WAAgC,IAA/BoB,EAA8B,uDAAtBD,EAAWE,EAAW,uCAEpD,MAAoB,aAAhBA,EAAO5B,KACL,GAAN,yB,GAAgB2B,OAAhB,CAAsB,CAAC,GAAKF,QAAMI,OAAQ,KAAOD,EAAOlC,KAAM,KAAOkC,EAAOV,QAGrES,GCNIG,EATU,WAAyB,IAAxBH,EAAuB,uDAAf,GAAIC,EAAW,uCAE7C,MAAoB,eAAhBA,EAAO5B,KAEJ4B,EAAOT,MAGPQ,G,OCKII,EARDC,YAAYC,YAAgB,CAEtC1B,iBAAkBA,EAClBuB,kBAAmBA,KCGvBI,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAAOA,GAAO,kBAAC,EAAD,OAAoBK,SAASC,eAAe,SJyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.746f5781.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport './App.css';\n\n\n\nclass App extends Component {\n  add = () => {\n    let text = this.props.changeText,\n      undo = \"text-normal\"\n    this.props.ADD_TODO(text, undo)\n  }\n\n  render() {\n    return (\n      <div>\n\n        <div id=\"myDIV\" className=\"header\">\n          <div className=\"text\">\n            <h2>To-Do APP!</h2><br />\n            <p>ADD NEW TO-DO</p>\n          </div>\n          <div>\n            <input type=\"text\" placeholder=\"Enter New Task\" onChange={(e) => this.props.CHANGE_TXT(e)} /><br /><br /><br />\n            <span className=\"addBtn\" onClick={this.add}>Add </span>\n          </div>\n        </div>\n        <div className=\"get-work\">\n          <h3> Let's get Some Work done!</h3>\n          {this.props.listTodoReducers.map((el, i) => {\n            return (\n              <p key={i}><span>{el.text}</span><button className=\"btn1\" onClick={() => this.delete(el.id)}>delete</button> </p>\n\n            )\n\n\n          }\n\n\n\n\n\n          )\n          }\n\n\n\n        </div >\n      </div >\n\n    );\n  }\n}\n\nconst mapDispatchToProps = ({ dispatch }) => {\n  return {\n    ADD_TODO: (text, undo) => {\n      dispatch({ type: 'ADD_TODO', text: text, undo: undo })\n    },\n\n    CHANGE_TXT: (e) => {\n      dispatch({ type: 'CHANGE_TXT', value: e.target.value })\n    }\n\n  }\n}\n\n\nconst mapStateToProps = ({ listTodoReducers, ChangeTextReducers }) => {\n  return {\n    listTodoReducers: listTodoReducers,\n    changetext: ChangeTextReducers\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { match } from \"minimatch\"\r\n\r\nconst initState = [\r\n    { \"id\": 1, \"text\": \"item2\", \"undo\": \"text-undo\" },\r\n    { \"id\": 2, \"text\": \"item3\", \"undo\": \"text-normal\" },\r\n\r\n]\r\n\r\n\r\nconst listTodoReducers = (state = initState, action) => {\r\n\r\n    if (action.type === 'ADD_TODO')\r\n    return [...this.state,{\"id\":match.random, \"text\":action.text, \"undo\":action.undo}]\r\n\r\n\r\n    return state\r\n}\r\nexport default listTodoReducers","const ChangeTxtReducers= (state = '', action) => {\r\n\r\n    if (action.type === 'CHANGE_TXT')\r\n{\r\n    return action.value\r\n}\r\n\r\n    return state\r\n}\r\nexport default ChangeTxtReducers","import listTodoReducers from './Reducers/listTodoReducers'\r\nimport ChangeTxtReducers from './Reducers/changeTxtReducers'\r\nimport { createStore, combineReducers } from 'redux'\r\n\r\nconst store = createStore(combineReducers({\r\n\r\n    listTodoReducers: listTodoReducers,\r\n    ChangeTxtReducers: ChangeTxtReducers\r\n\r\n\r\n})\r\n)\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\n\nimport store from './store'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}